<?xml version="1.0"?>
<ruleset name="PHP Cheatsheets">
	<description>PHP Cheatsheets rules for PHP_CodeSniffer</description>

	<arg value="sp"/>
	<arg name="extensions" value="php"/>

	<exclude-pattern>include/PHP-cast-to-type/*</exclude-pattern>

	<!-- PHP cross-version compatibility -->
	<config name="testVersion" value="4.3-99.0"/>
	<rule ref="PHPCompatibility">
		<!-- Exclude notices about constants which are back-filled. -->
		<exclude name="PHPCompatibility.PHP.NewConstants.php_eolFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.php_version_idFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.e_strictFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.e_recoverable_errorFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.e_deprecatedFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.e_user_deprecatedFound"/>
	</rule>

	<!-- Selectively exclude certain files from certain checks after manual verification. -->
	<!-- These issues are either accompanied by a work-around... -->
	<rule ref="PHPCompatibility.PHP.NewFunctionParameters.preg_replace_countFound">
		<exclude-pattern>bin/autogen-static-sheets.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.NewFunctions.filter_varFound">
		<exclude-pattern>class.vartype-php5.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.NewFunctions.filter_var_arrayFound">
		<exclude-pattern>class.vartype-php5.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.NewFunctions.intdivFound">
		<exclude-pattern>class.vartype-php7.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.NewClasses.exceptionFound">
		<exclude-pattern>class.vartype-php5.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.NewClasses.errorFound">
		<exclude-pattern>class.vartype-php7.php</exclude-pattern>
	</rule>
	<!-- ... or explicitely part of the cheatsheets to demonstrate behaviour changes in PHP. -->
	<rule ref="PHPCompatibility.PHP.NewMagicMethods.__tostringFound">
		<exclude-pattern>include/functions.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.ValidIntegers.BinaryIntegerFound">
		<exclude-pattern>include/vars-to-test-php54.php</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.PHP.ValidIntegers.HexNumericStringFound">
		<exclude-pattern>include/vars-to-test.php</exclude-pattern>
	</rule>
	<!-- Sitemaps are being generated in PHP 5.6. -->
	<rule ref="PHPCompatibility.PHP.NewConstants.sort_naturalFound">
		<exclude-pattern>bin/generate-sitemaps.php</exclude-pattern>
	</rule>


	<rule ref="WordPress">
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines" />

		<!-- else on new line is perfectly fine -->
		<exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace" />
		<!-- just like using else if... -->
		<exclude name="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed" />

		<!-- Syntax is already being checked on travis build. -->
		<exclude name="Generic.PHP.Syntax"/>

		<!-- Demanding Yoda conditions is stupid. -->
		<exclude name="WordPress.PHP.YodaConditions"/>

		<!-- WP specific sniffs which should be ignored -->
		<exclude name="WordPress.VIP" />
		<exclude name="WordPress.WP" />
		<exclude name="WordPress.XSS.EscapeOutput" />
		<exclude name="WordPress.Files.FileName.InvalidClassFileName" />
		<exclude name="WordPress.CSRF.NonceVerification" />
		<exclude name="WordPress.PHP.DevelopmentFunctions" />
		<exclude name="WordPress.PHP.DiscouragedPHPFunctions.runtime_configuration_ini_set" />
		<exclude name="WordPress.PHP.DiscouragedPHPFunctions.runtime_configuration_error_reporting" />

		<!-- Exclude a number of rules for being over-zealous for this codebase. -->
		<!--<exclude name="Squiz.Commenting.ClassComment.SpacingBefore"/>-->

		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
		<!--<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>

		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
		<exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
		<exclude name="Squiz.Commenting.InlineComment.SpacingAfter"/>-->

		<exclude name="Squiz.Commenting.LongConditionClosingComment"/>

		<!-- Declaring scope would break PHP4 compatibility. -->
		<exclude name="Squiz.Scope.MemberVarScope"/>
		<exclude name="Squiz.Scope.MethodScope"/>

		<!-- More PHP4 compatibility. -->
		<exclude name="WordPress.PHP.RestrictedPHPFunctions.create_function_create_function"/>

	</rule>

	<!-- Temporarily downgraded to warning because of a bug in the sniff which shouldn't break the build.
		 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1064 -->
	<rule ref="WordPress.Arrays.ArrayIndentation.MultiLineArrayItemNotAligned">
		<type>warning</type>
	</rule>

	<rule ref="WordPress.Arrays.ArrayDeclarationSpacing.ArrayItemNoNewLine">
		<exclude-pattern>class.vartype.php</exclude-pattern>
	</rule>

	<rule ref="Squiz.PHP.DisallowMultipleAssignments">
		<exclude-pattern>/include/vars-to-test.php</exclude-pattern>
	</rule>


	<!-- exclude the 'empty' index files from some documentation checks -->
	<rule ref="Squiz.Commenting.FileComment.WrongStyle">
		<exclude-pattern>*/index.php</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.InlineComment.SpacingAfter">
		<exclude-pattern>*/index.php</exclude-pattern>
	</rule>-->

</ruleset>
